<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Availability Grid</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 2em;
      background: #fafafa;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1em;
    }
    th, td {
      border: 1px solid #ccc;
      text-align: center;
      padding: 10px;
    }
    .status {
      height: 20px;
      width: 20px;
      border-radius: 50%;
      border: 2px solid #666;
      display: inline-block;
      cursor: pointer;
    }
    .available {
      background: #8BC34A;
    }
    .meeting {
      background: #2196F3;
    }
    .unselected {
      background: transparent;
    }
    .legend span {
      margin-right: 1em;
    }
    .controls button {
      margin: 0.5em 0.5em 0 0;
    }
  </style>
</head>
<body>
  <h1>🕒 Weekly Availability Grid</h1>
  <div class="legend">
    <span><span class="status available"></span> Available</span>
    <span><span class="status meeting"></span> PB Meeting</span>
    <span><span class="status unselected" style="border-color:#999"></span> None</span>
  </div>

  <table>
    <thead>
      <tr>
        <th>Time</th>
        <th>Monday</th>
        <th>Tuesday</th>
        <th>Wednesday</th>
        <th>Thursday</th>
        <th>Friday</th>
        <th>Saturday</th>
        <th>Sunday</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div class="controls">
    <button onclick="generateLink()">🔗 Share Link</button>
    <button onclick="saveSelections()">💾 Save</button>
    <button onclick="loadSelections()">📥 Load</button>
    <button onclick="resetGrid()">❌ Reset</button>
    <p id="linkOutput"></p>
  </div>

  <script>
    const times = ["8:00 - 9:00", "9:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00", "12:00 - 1:00", "1:00 - 2:00", "2:00 - 3:00", "3:00 - 4:00", "4:00 - 5:00"];
    const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    const statusOrder = ["unselected", "available", "meeting"];
    let allDots = [];

    function createDotCell(i) {
      const td = document.createElement("td");
      const dot = document.createElement("span");
      dot.className = "status unselected";
      dot.dataset.index = i;
      dot.onclick = () => {
        const current = statusOrder.indexOf(dot.classList[1]);
        dot.classList.remove(statusOrder[current]);
        const next = (current + 1) % statusOrder.length;
        dot.classList.add(statusOrder[next]);
      };
      td.appendChild(dot);
      allDots.push(dot);
      return td;
    }

    function buildGrid() {
      const tbody = document.querySelector("tbody");
      times.forEach((time, i) => {
        const row = document.createElement("tr");
        const timeCell = document.createElement("td");
        timeCell.textContent = time;
        row.appendChild(timeCell);
        days.forEach((_, j) => {
          row.appendChild(createDotCell(i * days.length + j));
        });
        tbody.appendChild(row);
      });
    }

    function encodeState() {
      return allDots.map(dot =>
        dot.classList.contains("available") ? "a" :
        dot.classList.contains("meeting") ? "m" : "u"
      ).join("");
    }

    function decodeState(stateStr) {
      if (!stateStr || stateStr.length !== allDots.length) return;
      stateStr.split('').forEach((char, i) => {
        allDots[i].className = 'status ' + (char === 'a' ? 'available' : char === 'm' ? 'meeting' : 'unselected');
      });
    }

    function generateLink() {
      const base = window.location.origin + window.location.pathname;
      const state = encodeState();
      const url = `${base}?state=${state}`;
      document.getElementById("linkOutput").innerHTML = `Share this link:<br><a href="${url}" target="_blank">${url}</a>`;
    }

    function resetGrid() {
      allDots.forEach(dot => dot.className = 'status unselected');
      document.getElementById("linkOutput").textContent = "";
      localStorage.removeItem("scheduleState");
    }

    function saveSelections() {
      localStorage.setItem("scheduleState", encodeState());
      alert("Selections saved locally ✅");
    }

    function loadSelections() {
      const saved = localStorage.getItem("scheduleState");
      if (saved) decodeState(saved);
    }

    buildGrid();

    const urlState = new URLSearchParams(window.location.search).get("state");
    if (urlState) decodeState(urlState);
  </script>
</body>
</html>
